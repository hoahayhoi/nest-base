import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function seedForAppointment() {
  console.log('üîÑ Resetting database...');

  // X√ìA D·ªÆ LI·ªÜU TR∆Ø·ªöC KHI SEED
  await prisma.appointment.deleteMany();

  console.log('‚úÖ Database reset successfully!');

  console.log('üå± Seeding Appointments...');

  // L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng ch∆∞a c√≥ l·ªãch h·∫πn
  const orderDetailsWithoutAppointments =
    await prisma.serviceOrderDetail.findMany({
      where: { appointment: null },
      include: {
        order: {
          include: {
            customer: {
              include: {
                user: { include: { addresses: true } },
              },
            },
          },
        },
      },
    });

  // T·∫°o danh s√°ch l·ªãch h·∫πn t·ª´ c√°c ƒë∆°n h√†ng ch∆∞a c√≥ l·ªãch
  const appointmentsData = orderDetailsWithoutAppointments
    .map((detail, index) => {
      const customerAddress = detail.order.customer.user.addresses[0]?.id; // L·∫•y ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n c·ªßa user

      if (!customerAddress) {
        console.warn(
          `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ kh√°ch h√†ng cho ƒë∆°n h√†ng ${detail.id}, b·ªè qua.`,
        );
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ ƒë·ªãa ch·ªâ
      }

      return {
        order_detail_id: detail.id,
        scheduled_date: new Date(
          new Date().setDate(new Date().getDate() + (index % 7) + 1),
        ), // L·ªãch h·∫πn trong 1 tu·∫ßn t·ªõi
        scheduled_time: `${9 + (index % 8)}:00`, // Gi·ªù h·∫πn ng·∫´u nhi√™n t·ª´ 9:00 - 16:00
        status: 'pending',
        customer_note: `Customer note for order ${detail.id}`,
        employee_note: null,
        customer_address: customerAddress, // Th√™m tr∆∞·ªùng customer_address
      };
    })
    .filter((a) => a !== null); // Lo·∫°i b·ªè c√°c ph·∫ßn t·ª≠ null

  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá, d·ª´ng seed
  if (appointmentsData.length === 0) {
    console.log('‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch h·∫πn n√†o ƒë∆∞·ª£c t·∫°o.');
    return;
  }

  // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng appointments
  await prisma.appointment.createMany({ data: appointmentsData });

  console.log('‚úÖ Seeding completed successfully!');
}
